
@inject NavigationManager navigationManager
@inject IStudentService studentService

<div class="input-group">
    <input @bind-value="searchText"
           @bind-value:event="oninput"
           type="search"
           list="students"
           @onkeyup="HandleSearch"
           class="form-control me-2"
           placeholder="Search by name ..."
           aria-label="Search"
           @ref="searchInput" />
    <datalist id="students">
        @foreach (var suggestion in suggestions)
        {
            <option>@suggestion</option>
        }
    </datalist>
    <div class="input-group-append">
        <button class="btn btn-outline-success" @onclick="Search">
            <i class="fa fa-search"></i>
            Search
        </button>
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private List<string> suggestions = new List<string>();
    protected ElementReference searchInput;

    [Parameter]
    public string From { get; set; } = string.Empty; //= "admin" or "department"

    [Parameter]
    public int? OptionId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public void Search()
    {
        if (searchText != string.Empty)
        {
            navigationManager.NavigateTo($"{From}/students/search/{searchText}/1");
        }
        else
        {
            navigationManager.NavigateTo($"{From}/students");
        }
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            Search();
        }
        else if (searchText.Length > 1)
        {
            if (OptionId is null)
            {
                suggestions = await studentService.GetStudentSearchSuggestions(searchText);
            }
            else
            {
                suggestions = await studentService.GetStudentSearchSuggestions(searchText, (int)OptionId);
            }
        }
    }
}
