
@inject ICourseStructureService courseStructureService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]


<div class="border m-1 p-3 rounded-3">

    <h3 class="my-main-title">List of Courses for @DepartmentOptionName</h3><hr />

    @if (loading)
    {
        @*<span>@message</span>*@
        <Loading Message=@message></Loading>
    }
    else
    {
        <button class="btn btn-outline-success float-start mb-3" @onclick="@(() => BackToProgrammeList())">
            <i class="oi oi-caret-left"></i>
            Back
        </button>
        <table class="table table-striped table-sm border">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Title</th>
                    <th class="my-text-align-center">Unit</th>
                    <th class="my-text-align-center">Status</th>
                    <th class="my-text-align-center">Level</th>
                    <th class="my-text-align-center">Semester</th>
                    <th class="my-text-align-center">❌</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="courseStructureService.ListOfCourses" Context="courseStructure">
                    <tr>
                        <td>@courseStructure.CourseCode</td>
                        <td>@courseStructure.CourseTitle</td>
                        <td class="my-text-align-center">@courseStructure.CourseUnit</td>
                        <td class="my-text-align-center">@courseStructure.CourseStatus</td>
                        <td class="my-text-align-center">@courseStructure.Level</td>
                        <td class="my-text-align-center">@courseStructure.Semester</td>
                        <td class="my-text-align-center">
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => RemoveCourseStructure(courseStructure))" title="Remove Course">
                                <i class="oi oi-trash"></i>
                            </button>
                        </td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    }
</div>

@code {

    bool loading = true;
    string message = "Loading...";

    [Parameter]
    public int DepartmentOptionId { get; set; } = 0;
    [Parameter]
    public string DepartmentOptionName { get; set; } = string.Empty;

    [CascadingParameter]
    public Error error { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            courseStructureService.ListOfCoursesChanged += StateHasChanged;
            loading = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    public void Dispose()
    {
        courseStructureService.ListOfCoursesChanged -= StateHasChanged;
    }

    void BackToProgrammeList()
    {
        navigationManager.NavigateTo("/admin/course/structure");
    }

    async void RemoveCourseStructure(CourseStructureResponse courseStructure)
    {
        try
        {
            bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm",
                            $"Do you really want to delete '{courseStructure.CourseCode}: {courseStructure.CourseTitle}'?");
            if (confirmed)
            {                
                await courseStructureService.RemoveCourse(courseStructure.Id);
                await courseStructureService.GetListOfCourses(DepartmentOptionId);
                //await InvokeAsync(() =>
                //  {
                //      StateHasChanged();
                //  });
                toastService.ShowInfo($"{courseStructure.CourseCode}: {courseStructure.CourseTitle} was deleted successfully.");
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }
}
