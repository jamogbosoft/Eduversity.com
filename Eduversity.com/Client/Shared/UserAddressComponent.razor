@inject IUserAddressService userAddressService
@inject ICountryService countryService
@inject IStateService stateService
@inject ILGAService lgaService
@inject IToastService _toastService
@attribute [Authorize]

<div class="border m-0 p-3 rounded-3">
    @if (loading)
    {
        @*<span>@message</span>*@
        <Loading Message=@message></Loading>
    }
    else
    {
        <h3 class="my-main-title">Personal Address</h3>

        <hr />
        @if (address == null)
        {
            <span>
                You haven't captured your address, yet.
                <button class="btn btn-outline-info" @onclick="InitAddress">Add an address?</button>
            </span>
        }
        else if (!editAddress)
        {
            <div class="card-address">
                <p>
                    <span><strong>Email:</strong> @address.EmailAddress</span><br />
                    <span><strong>Phone Number:</strong> @address.MobileNumber @address.TelephoneNumber</span><br />
                    <span><strong>Next of Kin:</strong> @address.NextOfKin</span><br />
                    <span><strong>Next of Kin Email:</strong> @address.NextOfKinEmailAddress</span><br />
                    <span><strong>Next of Kin Phone No:</strong> @address.NextofKinMobileNumber @address.NextOfKinTelephoneNumber</span><br />
                    <span><strong>Nationality:</strong> @address.CountryName</span><br />
                    <span><strong>State of Origin:</strong> @address.StateName</span><br />
                    <span><strong>LGA of Origin:</strong> @address.LGAName</span><br />
                    <span><strong>Contact Address:</strong> @address.ContactAddress</span><br />
                    <span><strong>Permanent Address:</strong> @address.PermanentAddress</span><br />
                </p>
            </div>
            <AuthorizeView Roles="HOD">
                <NotAuthorized>
                    @*HOD's account should not edit any person's address*@
                    <button class="btn btn-primary px-5" @onclick="HandleEditAddress">Edit</button>
                </NotAuthorized>
            </AuthorizeView>
        }
        else
        {
            <EditForm Model="address" OnValidSubmit="SubmitAddress" class="was-validated">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="row mb-3">
                    <div class="col">
                        <label for="emailAddress">Email Address</label>
                        <InputText id="emailAddress" @bind-Value="address.EmailAddress"
                           class="form-control" maxlength="45" />
                        <ValidationMessage For="@(() => address.EmailAddress)" />
                    </div>
                    <div class="col">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label for="mobileNumber">Mobile No</label>
                        <InputText id="mobileNumber" @bind-Value="address.MobileNumber"
                           class="form-control" maxlength="15" />
                        <ValidationMessage For="@(() => address.MobileNumber)" />
                    </div>
                    <div class="col">
                        <label for="telephoneNumber">Telephone No</label>
                        <InputText id="telephoneNumber" @bind-Value="address.TelephoneNumber"
                           class="form-control" maxlength="15" />
                        <ValidationMessage For="@(() => address.TelephoneNumber)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label for="nextOfKin">Next of Kin</label>
                        <InputText id="nextOfKin" @bind-Value="address.NextOfKin"
                           class="form-control" maxlength="30" />
                        <ValidationMessage For="@(() => address.NextOfKin)" />
                    </div>
                    <div class="col">
                        <label for="nextOfKinEmailAddress">Next of Kin Email</label>
                        <InputText id="nextOfKinEmailAddress" @bind-Value="address.NextOfKinEmailAddress"
                           class="form-control" maxlength="45" />
                        <ValidationMessage For="@(() => address.NextOfKinEmailAddress)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label for="nextofKinMobileNumber">Next of Kin Mobile No</label>
                        <InputText id="nextofKinMobileNumber" @bind-Value="address.NextofKinMobileNumber"
                           class="form-control" maxlength="15" />
                        <ValidationMessage For="@(() => address.NextofKinMobileNumber)" />
                    </div>
                    <div class="col">
                        <label for="nextOfKinTelephoneNumber">Next of Kin Telephone No</label>
                        <InputText id="nextOfKinTelephoneNumber" @bind-Value="address.NextOfKinTelephoneNumber"
                           class="form-control" maxlength="15" />
                        <ValidationMessage For="@(() => address.NextOfKinTelephoneNumber)" />
                    </div>
                </div>
                @if (countryService.Countries != null && countryService.Countries.Count > 0)
                {
                    <div class="row mb-3">
                        <div class="col">
                            <label for="inputCountry">Country</label>
                            <InputSelect class="form-select" id="inputCountry"
                             ValueExpression="@(()=>address.CountryId)" Value="@address.CountryId"
                             ValueChanged="@((int value) => OnCountryValueChanged(value ))">

                                <option value="0">Select Country...</option>
                                @foreach (var country in countryService.Countries)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label for="inputState">State</label>
                            <InputSelect class="form-select" id="inputState"
                             ValueExpression="@(()=>address.StateId)" Value="@address.StateId"
                             ValueChanged="@((int value) => OnStateValueChanged(value))">

                                <option value="0">Select State...</option>
                                @foreach (var state in stateService.States)
                                {
                                    <option value="@state.Id">@state.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label for="inputLGA">LGA</label>
                            <InputSelect class="form-select" id="inputLGA"
                             ValueExpression="@(()=>address.LGAId)" Value="@address.LGAId"
                             ValueChanged="@((int value) => OnLGAValueChanged(value))">

                                <option value="0">Select LGA...</option>
                                @foreach (var lga in lgaService.LGAs)
                                {
                                    <option value="@lga.Id">@lga.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                }
                <div class="row mb-3">
                    <div class="col">
                        <label for="contactAddress">Contact Address</label>
                        <InputTextArea id="contactAddress" @bind-Value="address.ContactAddress"
                               class="form-control" required maxlength="150" />
                        <ValidationMessage For="@(() => address.ContactAddress)" />
                        <div class="invalid-feedback">Please enter the contact address</div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label for="permanentAddress">Permanent Address</label>
                        <InputTextArea id="permanentAddress" @bind-Value="address.PermanentAddress"
                               class="form-control" maxlength="150" />
                        <ValidationMessage For="@(() => address.PermanentAddress)" />
                    </div>
                </div>

                <button class="btn btn-danger px-3" @onclick="HandleReload">Cancel</button>
                <button type="submit" class="btn btn-success mx-3 px-3">✔️ Save</button>
            </EditForm>
        }
    }
</div>

@code {
    UserAddressResponse address = null!;
    bool editAddress = false;
    bool loading = true;
    bool canceled = false;

    string message = "Loading Address...";

    [Parameter]
    public long UserId { get; set; }

    [CascadingParameter]
    public Error error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var result = await userAddressService.GetAddress(UserId);
            address = result;
            await countryService.GetCountries();
            if (address != null)
            {
                await stateService.GetStates(address.CountryId);
                await lgaService.GetLGAs(address.StateId);
            }
            loading = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private async Task SubmitAddress()
    {
        try
        {
            if (!canceled)
            {
                editAddress = false;
                address.UserId = UserId;
                address = await userAddressService.AddOrUpdateAddress(address);
                _toastService.ShowSuccess("Personal Address Updated Successfully");
            }
            canceled = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private void InitAddress()
    {
        try
        {
            address = new UserAddressResponse();
            editAddress = true;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private void HandleEditAddress()
    {
        editAddress = !editAddress;
    }

    private async Task HandleReload()
    {
        try
        {
            canceled = true;
            var result = await userAddressService.GetAddress(UserId);
            address = result;
            editAddress = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private async Task OnCountryValueChanged(int value)
    {
        try
        {
            address.LGAId = 0;
            address.StateId = 0;
            address.CountryId = value;
            await stateService.GetStates(address.CountryId);
            lgaService.LGAs = new List<LGAReadDto>();
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private async Task OnStateValueChanged(int value)
    {
        try
        {
            address.LGAId = 0;
            address.StateId = value;
            await lgaService.GetLGAs(address.StateId);
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private async Task OnLGAValueChanged(int value)
    {
        try
        {
            address.LGAId = value;
            return;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }
}
