@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IAuthService authService
@inject IToastService toastService

<div class="card shadow m-0">
    <div class="card-header">
        <h5 class="my-main-title">@MainTitle</h5>
    </div>
    <div class="card-body">
        <EditForm Model="user" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="col-12 row" style="font-weight:bold">
                <span class="@messageCssClass col-12 mb-3">@message</span>
            </div>
            <div class="col-12 row mb-4">
                <InputText id="username" @bind-Value="user.UserName" class="form-control rounded-pill" placeholder="Email Address" />
                <ValidationMessage For="@(() => user.UserName)" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="password" @bind-Value="user.Password" class="form-control rounded-pill" type="Password" placeholder="Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control rounded-pill" type="Password" placeholder="Confirm Password" />
                <ValidationMessage For="@(() => user.ConfirmPassword)" />
            </div>
            <div class="col-12 row">
                <span class="col-12"></span>
                <button type="submit" class="btn btn-primary col-6">Sign up</button>
                <a href="/@Role.ToLower()/signin" class="col-6">Already a user?</a>
            </div>
            <br />

        </EditForm>
    </div>
</div>
@code {

    [Parameter]
    public string MainTitle { get; set; } = "Sign-Up";
    [Parameter]
    public string Role { get; set; } = string.Empty;

    UserRegisterRequest user = new UserRegisterRequest();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    protected override void OnInitialized()
    {
        user.Role = Role;
    }

    async Task HandleRegistration()
    {
        try
        {
            messageCssClass = "text-info";
            message = "Creating a new account...";
            var result = await authService.Register(user);
            message = result.Message;
            if (result.Success)
            {
                messageCssClass = "text-success";
                message += $" Check your email '{user.UserName}' for the activation code";               //" Login into your account.";
                toastService.ShowSuccess(message);
            }
            else
            {
                messageCssClass = "text-warning";
                toastService.ShowWarning(message);

            }
        }
        catch (Exception ex)
        {
            messageCssClass = "text-danger";
            toastService.ShowError(ex.Message);
        }
    }
}
