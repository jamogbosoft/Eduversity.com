@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService authService
@inject IToastService toastService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<div class="card shadow m-0">
    <div class="card-header">
        <h5 class="my-main-title">@MainTitle</h5>
    </div>
    <div class="card-body">
        <EditForm Model="user" OnValidSubmit="HandleSignIn">
            <DataAnnotationsValidator />
            
            <div class="col-12 row" style="font-weight:bold">
                <span class="@messageCssClass col-12 mb-3">@message</span>
            </div>

            <div class="col-12 row mb-4">
                <InputText id="username" @bind-Value="user.UserName" class="form-control rounded-pill" placeholder="Email Address" />
                <ValidationMessage For="@(() => user.UserName)" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="password" @bind-Value="user.Password" class="form-control rounded-pill" type="Password" placeholder="Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <div class="col-12 row">
                <span class="col-12"></span>
                <button type="submit" class="btn btn-primary btncol mb-3">Login</button>
                <span class="spancol"></span>

                <button @onclick="HandleSignUp" class="btn btn-outline-success btncol mb-3">Create Account</button>
            </div>
            <div class="col-12">
                <br />
                <a href="/forgot-password" class="col-12">Forgot password?</a>
            </div>
            <br />
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public string MainTitle { get; set; } = "Sign-In";
    [Parameter]
    public string Role { get; set; } = string.Empty;

    UserLoginRequest user = new UserLoginRequest();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    string returnUrl = string.Empty;

    //protected override void OnInitialized()
    protected async override Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url!;
        }

        user.Role = Role;
    }

    private async Task HandleSignIn()
    {
        try
        {
            messageCssClass = "text-info";
            message = "Authenticating...";
            var result = await authService.Login(user);
            if (result.Success)
            {
                message = string.Empty;

                await localStorage.SetItemAsync("authToken", result.Data);
                await authenticationStateProvider.GetAuthenticationStateAsync();
                if (returnUrl != "") { navigationManager.NavigateTo(returnUrl); }
                else { navigationManager.NavigateTo(""); }
            }
            else
            {
                messageCssClass = "text-warning";
                message = result.Message;
                toastService.ShowWarning(message);
            }
        }
        catch (Exception ex)
        {
            messageCssClass = "text-danger";
            toastService.ShowError(ex.Message);
        }
    }

    private void HandleSignUp()
    {
        navigationManager.NavigateTo($"/{Role.ToLower()}/signup");
    }
}