@inject IAuthService authService
@inject IToastService toastService
@inject NavigationManager navigationManager

<div class="card shadow m-0">
    <div class="card-header">
        <h5 class="my-main-title">Reset Your Password</h5>
    </div>
    <div class="card-body">
        <EditForm Model="user" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="col-12 row" style="font-weight:bold">
                <span class="@messageCssClass col-12 mb-3">@message</span>
            </div>
            <div class="col-12 row mb-2">
                <h6 class="alert alert-info">
                    Please check your email '@user.Email' for your password reset token.
                </h6>
            </div>
            <div class="col-12 row mb-4">
                <InputText id="token" @bind-Value="user.Token" class="form-control rounded-pill" placeholder="Password Reset Token" />
                <ValidationMessage For="@(() => user.Token)" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="newPassword" @bind-Value="user.NewPassword" class="form-control rounded-pill" type="password" placeholder="New Password" />
                <ValidationMessage For="@(() => user.NewPassword)" class="text-start" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="confirmNewPassword" @bind-Value="user.ConfirmNewPassword" class="form-control rounded-pill" type="password" placeholder="Confirm New Password" />
                <ValidationMessage For="@(() => user.ConfirmNewPassword)" class="text-start" />
            </div>
            <div class="col-12 row mb-4">
                <button type="submit" class="btn btn-primary">Reset Password</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    UserPasswordResetRequest user = new UserPasswordResetRequest();

    [Parameter]
    public string? EmailAddress { get; set; }

    string message = string.Empty;
    string messageCssClass = string.Empty;

    protected override void OnParametersSet()
    {
        if (EmailAddress is not null)
        {
            user.Email = EmailAddress;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            messageCssClass = "text-info";
            message = "Processing...";

            var result = await authService.ResetPasswordAsync(user);

            if (result.Success)
            {
                message = "Your password reset is successful. Please, login into your account.";
                toastService.ShowWarning(message);
                navigationManager.NavigateTo("");
            }
            else
            {
                messageCssClass = "text-warning";
                message = result.Message;
            }
        }
        catch (Exception ex)
        {
            messageCssClass = "text-danger";
            toastService.ShowError(ex.Message);
        }
    }
}