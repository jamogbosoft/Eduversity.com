@page "/change-password"
@inject IAuthService authService
@inject IToastService toastService
@attribute [Authorize]

<PageTitle>Change Password</PageTitle>

<div class="border m-0 p-3 rounded-3">
    @if (!ChangeUserPassword)
    {
        <span>
            <button class="btn btn-outline-secondary" @onclick="EnableChangePassword">Change Password</button>
        </span>
    }
    else
    {
        <EditForm Model="request" OnValidSubmit="HandleChangeUserPassword">
            <DataAnnotationsValidator />

            <div>
                <br />
            </div>
            <div>
                <h3 class="my-main-title">Change Password</h3><hr>
            </div>
            <div>
                <br />
            </div>
            <div class="col-12 row" style="font-weight:bold">
                <span class="@messageCssClass col-12 mb-3">@message</span>
            </div>
            <div class="col-12 row mb-4">
                <InputText id="oldPassword" @bind-Value="request.OldPassword" class="form-control" type="password" placeholder="Old Password" />
                <ValidationMessage For="@(() => request.OldPassword)" class="text-start" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="newPassword" @bind-Value="request.NewPassword" class="form-control" type="password" placeholder="New Password" />
                <ValidationMessage For="@(() => request.NewPassword)" class="text-start" />
            </div>
            <div class="col-12 row mb-4">
                <InputText id="confirmNewPassword" @bind-Value="request.ConfirmNewPassword" class="form-control" type="password" placeholder="Confirm New Password" />
                <ValidationMessage For="@(() => request.ConfirmNewPassword)" class="text-start" />
            </div>
            <button type="submit" class="btn btn-primary">Change Password</button>
            @if (showCancelButton)
            {
                <button class="btn btn-danger mx-3" @onclick="Cancel">Cancel</button>
            }
        </EditForm>
    }
</div>

@code {
    UserChangePasswordRequest request = new UserChangePasswordRequest();
    string message = string.Empty;
    string messageCssClass = string.Empty;
    [Parameter]
    public bool ChangeUserPassword { get; set; } = true;
    public bool showCancelButton { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {

    }

    private async Task HandleChangeUserPassword()
    {
        try
        {
            messageCssClass = "text-info";
            message = "Changing password...";
            var result = await authService.ChangePassword(request);
            message = result.Message;
            if (result.Success)
            {
                messageCssClass = "text-success";
                toastService.ShowSuccess(message);
            }
            else
            {
                messageCssClass = "text-warning";
                toastService.ShowWarning(message);
            }
            request = new UserChangePasswordRequest();
        }
        catch (Exception ex)
        {
            messageCssClass = "text-danger";
            toastService.ShowError(ex.Message);
        }
    }

    private async Task EnableChangePassword()
    {
        ChangeUserPassword = true;
        showCancelButton = true;
    }
    private async Task Cancel()
    {
        ChangeUserPassword = false;
    }
}
