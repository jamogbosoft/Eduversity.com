@page "/signin"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService authService
@inject IToastService toastService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Sign In</PageTitle>

<div class="border m-0 p-3 rounded-3">
    <EditForm Model="user" OnValidSubmit="HandleSignIn">
        <DataAnnotationsValidator />

        <div>
            <br />
        </div>
        <div>
            <h3 class="my-main-title">Student Login</h3>
        </div>
        <div>
            <br />
        </div>
        <div class="col-12 row" style="font-weight:bold">
            <span class="@messageCssClass col-12 mb-3">@message</span>
        </div>

        <div class="col-12 row mb-4">
            <InputText id="username" @bind-Value="user.UserName" class="form-control rounded-pill " placeholder="Email Address" />
            <ValidationMessage For="@(() => user.UserName)" />
        </div>
        <div class="col-12 row mb-4">
            <InputText id="password" @bind-Value="user.Password" class="form-control rounded-pill " type="Password" placeholder="Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <div class="col-12 row">
            <span class="col-12"></span>
            <button type="submit" class="btn btn-primary btncol mb-3">Login</button>
            <span class="spancol"></span>
            <button @onclick="HandleSignUp" class="btn btn-outline-success btncol mb-3">Create Account</button>
        </div>
        <div class="col-12">
            <br />
            <a href="/passwordrecovery" class="col-12">Forgotten password?</a>
        </div>
        <br />
    </EditForm>
</div>

@code {
    private UserLogin user = new UserLogin();

    private string message = string.Empty;
    string messageCssClass = string.Empty;

    private string returnUrl = string.Empty;

    //protected override void OnInitialized()
    protected async override Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url!;
        }
    }

    private async Task HandleSignIn()
    {
        try
        {
            messageCssClass = "text-info";
            message = "Authenticating...";
            var result = await authService.Login(user);
            if (result.Success)
            {
                message = string.Empty;

                await localStorage.SetItemAsync("authToken", result.Data);
                await authenticationStateProvider.GetAuthenticationStateAsync();
                if (returnUrl != "") { navigationManager.NavigateTo(returnUrl); }
                else { navigationManager.NavigateTo(""); }
            }
            else
            {
                messageCssClass = "text-warning";
                message = result.Message;
                toastService.ShowWarning(message);
            }
        }
        catch (Exception ex)
        {

            messageCssClass = "text-danger";
            toastService.ShowError(ex.Message);
        }
    }

    private void HandleSignUp()
    {
        navigationManager.NavigateTo("/signup");
    }
}