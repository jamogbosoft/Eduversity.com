@page "/admin/country"
@page "/admin/country/{id:int}"
@inject ICountryService countryService
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Country</PageTitle>

<div class="border m-1 p-3 rounded-3 mb-3">
    @if (loading)
    {
        @*<span>@message</span>*@
        <Loading Message=@message></Loading>
    }
    else
    {

        @if (country.IsEditing)
        {
            <h3 class="my-main-title">Edit Country - "@country.Name"</h3>
        }
        else if (country.IsNew)
        {
            <h3 class="my-main-title">Create a new Country</h3>
        }
        <hr />
        <button type="button" class="btn btn-outline-primary float-end" @onclick="@(() => BackToCountries())">
            Countries
            <i class="oi oi-caret-right"></i>
        </button>
        <br />

        <br />

        <br />

        <EditForm Model="country" OnValidSubmit="AddOrUpdateCountry" class="was-validated">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="my-header row">
                <div class="col">Country</div>
                <div class="col text-align:center">Active</div>
                <div class="col"></div>
            </div>
            <div class="row">
                <div class="col">
                    <InputText id="countryName" @bind-Value="country.Name" class="form-control" placeholder="Enter Country" maxlength="30" required></InputText>
                    <ValidationMessage For="@(() => country.Name)" />
                    <div class="invalid-feedback">Please enter the country name</div>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="country.IsActive" class="form-check-input my-check-box"></InputCheckbox>
                </div>
                <div class="col">
                </div>
            </div>
            <hr>

            @if (!country.IsNew)
            {
                <div class="my-header row">
                    <div class="col">States</div>
                    <div class="col text-align:center">Active</div>
                    <div class="col"></div>
                </div>

                @foreach (var state in country.States)
                {
                    <div class="row">
                        <div class="col">
                            <InputText id="stateName" @bind-Value="state.Name" class="form-control"
                                disabled="@state.IsDeleted" placeholder="Enter State" maxlength="30" required>
                            </InputText>
                            <ValidationMessage For="@(() => state.Name)" />
                            <div class="invalid-feedback">Please enter the state name</div>
                        </div>
                        <div class="col col-visible">
                            <InputCheckbox @bind-Value="state.IsActive" class="form-check-input my-check-box" 
                                disabled="@state.IsDeleted">
                            </InputCheckbox>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-danger" disabled="@state.IsDeleted" 
                                @onclick="@(() => RemoveState(state))" title="Delete State">
                                <i class="oi oi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-primary mt-3" @onclick="AddState">
                    <i class="oi oi-plus"></i> Add State
                </button>
                <hr />
            }
            <button type="submit" class="btn btn-success float-start">@btnSubmitButtonText</button>

        </EditForm>
        @if (!country.IsNew)
        {
            <button type="button" class="btn btn-danger float-end" @onclick="DeleteCountry">
                Delete Country
            </button>
        }
        <br />

        <br />
    }
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    Country country = new Country();
    bool loading = true;
    string btnSubmitButtonText = "";
    string message = "Loading...";

    [CascadingParameter] Error error { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is null)
            {
                country = new Country { IsNew = true };
                btnSubmitButtonText = "Create Country";
            }
            else
            {
                var result = await countryService.GetAdminCountry((int)Id);
                var dbCountry = result.Data;
                if (dbCountry == null)
                {
                    message = $"Country with Id '{(int)Id}' does not exist!";
                    return;
                }
                country = dbCountry;
                country.IsEditing = true;
                btnSubmitButtonText = "Update Country";
            }
            loading = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    void RemoveState(State state)
    {
        try
        {
            if (state.IsNew)
            {
                country.States.Remove(state);
            }
            else
            {
                var oldState = country.States.Find(s => s.Id == state.Id);

                if (oldState == null)
                {
                    return;
                }
                oldState.IsDeleted = true;
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    void AddState()
    {
        try
        {
            country.States.Add(new State() { IsNew = true, CountryId = country.Id, Country = country });
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    async void AddOrUpdateCountry()
    {
        try
        {
            if (country.IsNew)
            {
                var result = await countryService.CreateCountry(country);
                navigationManager.NavigateTo($"admin/country/{result.Id}");

                toastService.ShowSuccess($"New Country '{result.Name}' was created successfully.");
            }
            else
            {
                var result = await countryService.UpdateCountry(country);
                navigationManager.NavigateTo($"admin/country/{result.Id}");

                toastService.ShowSuccess($"{country.Name} was updated successfully.");
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    async void DeleteCountry()
    {
        try
        {
            bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm",
                $"Do you really want to delete '{country.Name}' and all the states and LGAs in '{country.Name}'?");
            if (confirmed)
            {
                await countryService.DeleteCountry(country);
                navigationManager.NavigateTo("admin/countries");

                toastService.ShowInfo($"{country.Name} was deleted successfully.");
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private void BackToCountries()
    {
        navigationManager.NavigateTo("admin/countries");
    }
}
