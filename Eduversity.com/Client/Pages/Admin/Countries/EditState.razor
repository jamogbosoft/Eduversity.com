@page "/admin/state/{id:int}"
@inject IStateService stateService
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>State</PageTitle>

<div class="border m-1 p-3 rounded-3 mb-3">
    @if (loading)
    {
       @* <span>@message</span>*@
        <Loading Message=@message></Loading>
    }
    else
    {
        <h3 class="my-main-title">Edit State - "@state.Name" in @CountryName</h3><hr />

        <button type="button" class="btn btn-outline-primary btn-sm float-end mb-3" @onclick="@(() => BackToCountries())">
            Countries
            <i class="oi oi-caret-right"></i>
        </button>
        <button type="button" class="btn btn-outline-primary btn-sm float-end mb-3 mx-3" @onclick="@(() => BackToStates())">
            States
            <i class="oi oi-caret-right"></i>
        </button>
        <br />

        <br />

        <br />

        <EditForm Model="state" OnValidSubmit="AddOrUpdateState" class="was-validated">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="my-header row">
                <div class="col">State</div>
                <div class="col text-align:center">Active</div>
                <div class="col"></div>
            </div>
            <div class="row">
                <div class="col">
                    <InputText id="stateName" @bind-Value="state.Name" class="form-control form-control-sm" placeholder="Enter State" maxlength="30" required></InputText>
                    <ValidationMessage For="@(() => state.Name)" />
                    <div class="invalid-feedback">Please enter the state name</div>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="state.IsActive" class="form-check-input my-check-box"></InputCheckbox>
                </div>
                <div class="col">
                </div>
            </div>
            <hr>

            @if (!state.IsNew)
            {
                <div class="my-header row">
                    <div class="col">Local Governments</div>
                    <div class="col text-align:center">Active</div>
                    <div class="col"></div>
                </div>

                @foreach (var lga in state.LGAs)
                {
                    <div class="row">
                        <div class="col">
                            <InputText id="lgaName" @bind-Value="lga.Name" class="form-control form-control-sm"
                                disabled="@lga.IsDeleted" placeholder="Enter LGA" required>
                            </InputText>
                            <ValidationMessage For="@(() => lga.Name)" />
                            <div class="invalid-feedback">Please enter the LGA name</div>
                        </div>
                        <div class="col col-visible">
                            <InputCheckbox @bind-Value="lga.IsActive" class="form-check-input my-check-box" 
                                disabled="@lga.IsDeleted">
                            </InputCheckbox>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-danger btn-sm" disabled="@lga.IsDeleted"
                                @onclick="@(() => RemoveLGA(lga))" title="Delete LGA">
                                <i class="oi oi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-primary btn-sm mt-3" @onclick="AddLGA">
                    <i class="oi oi-plus"></i> Add LGA
                </button>
                <hr />
            }
            <button type="submit" class="btn btn-success btn-sm float-start">@btnSubmitButtonText</button>
        </EditForm>
        @if (!state.IsNew)
        {
            <button type="button" class="btn btn-danger btn-sm float-end" @onclick="DeleteState">
                Delete State
            </button>
        }
        <br />

        <br />
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    public int CountryId { get; set; }
    public string CountryName { get; set; } = string.Empty;
    State state = new State();

    bool loading = true;
    string btnSubmitButtonText = "";
    string message = "Loading...";

    [CascadingParameter] public Error error { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id <= 0)
            {
                message = $"State with Id '{Id}' does not exist!";
                return;
            }
            var result = await stateService.GetAdminState(Id);
            var dbStateResponse = result.Data;
            if (dbStateResponse == null || dbStateResponse.State == null)
            {
                message = $"State with Id '{Id}' does not exist!";
                return;
            }
            CountryName = dbStateResponse.CountryName;
            CountryId = dbStateResponse.CountryId;
            state = dbStateResponse.State;
            state.IsEditing = true;
            btnSubmitButtonText = "Update State";
            loading = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    void RemoveLGA(LGA lga)
    {
        try
        {
            if (lga.IsNew)
            {
                state.LGAs.Remove(lga);
            }
            else
            {
                var oldLGA = state.LGAs.Find(l => l.Id == lga.Id);

                if (oldLGA == null)
                {
                    return;
                }
                oldLGA.IsDeleted = true;
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    void AddLGA()
    {
        try
        {
            state.LGAs
                .Add(new LGA { IsNew = true, StateId = state.Id });
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    async void AddOrUpdateState()
    {
        try
        {
            if (state.IsNew)
            {
                var result = await stateService.CreateState(state);
                navigationManager.NavigateTo($"admin/state/{result.Id}");

                toastService.ShowSuccess($"New State '{result.Name}' was created successfully.");
            }
            else
            {
                state.IsNew = false;
                state = await stateService.UpdateState(state);
                navigationManager.NavigateTo($"admin/state/{state.Id}");

                toastService.ShowSuccess($"{state.Name} was updated successfully.");
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    async void DeleteState()
    {
        try
        {
            bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm",
                $"Do you really want to delete '{state.Name}' and all the LGAs in '{state.Name}'?");
            if (confirmed)
            {
                await stateService.DeleteState(state);
                navigationManager.NavigateTo($"admin/states/{CountryId}");

                toastService.ShowInfo($"{state.Name} was deleted successfully.");
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private void BackToCountries()
    {
        navigationManager.NavigateTo("admin/countries");
    }

    private void BackToStates()
    {
        navigationManager.NavigateTo($"admin/states/{CountryId}");
    }
}