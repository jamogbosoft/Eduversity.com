@page "/admin/course"
@page "/admin/course/{id:int}"
@inject ICourseService courseService
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Admin")]

<div class="border m-1 p-3 rounded-3 mb-3">
    @if (loading)
    {
        @*<span>@message</span>*@
        <Loading Message=@message />
    }
    else
    {
        @if (Id is null)
        {
            <PageTitle>Create a new Course</PageTitle>
            <h5 class="my-main-title">Create a new Course</h5>
        }
        else
        {
            <PageTitle>Edit @course.Code</PageTitle>
            <h5 class="my-main-title">Edit @course.Code: @course.Title</h5>
        }

        <hr />

        <div class="card shadow mb-4">
            <div class="card-header bg-transparent">
                <button type="button" class="btn btn-sm btn-outline-primary float-end" @onclick="@(() => BackToCourses())">
                    Courses
                    <i class="oi oi-caret-right"></i>
                </button>
            </div>
            <div class="card-body">

                <EditForm Model="course" OnSubmit="HandleSubmit" class="was-validated">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="code">Course Code</label>
                            <InputText id="code" @bind-Value="course.Code" class="form-control form-control-sm" required minlength="7" maxlength="7" />
                            <ValidationMessage For="@(() => course.Code)" />
                            <div class="invalid-feedback">Please enter the course code</div>
                        </div>
                        <div class="col-md-3">
                            <label for="unit">Unit</label>
                            <InputNumber id="unit" @bind-Value="course.Unit" class="form-control form-control-sm" min="0" max="6" required />
                            <ValidationMessage For="@(() => course.Unit)" />
                            <div class="invalid-feedback">Invalid course unit</div>
                        </div>
                        <div class="col-md-3">
                            <label for="status">Status</label>
                            <InputSelect id="status" @bind-Value="course.Status" class="form-select form-select-sm" required>
                                <option value="" disabled>Choose...</option>
                                <option value="C">C - Compulsory</option>
                                <option value="R">R - Required</option>
                                <option value="G">G - GST</option>
                                <option value="E">E - Elective</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => course.Status)" />
                            <div class="invalid-feedback">Please select the course status</div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col">
                            <label for="title">Course Title</label>
                            <InputText id="title" @bind-Value="course.Title" class="form-control form-control-sm" required maxlength="75" />
                            <ValidationMessage For="@(() => course.Title)" />
                            <div class="invalid-feedback">Please enter the course title</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col col-visible">
                            <label for="active">Active? </label>
                            <InputCheckbox id="active" @bind-Value="course.IsActive" class="form-check-input my-check-box"></InputCheckbox>
                        </div>
                    </div>
                    <br />

                    <button type="submit" class="btn btn-sm btn-primary mb-2 float-start">@btnSubmitText</button>
                    @if (Id is not null)
                    {
                        <button type="button" class="btn btn-sm btn-danger mb-2 float-end" @onclick="DeleteCourse">
                            <i class="oi oi-trash"></i>
                            Delete Course
                        </button>
                    }
                    <br />  <br />
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int? Id { get; set; }

    string btnSubmitText = string.Empty;
    bool loading = true;
    string message = "Loading...";

    [CascadingParameter] public Error error { get; set; }

    CourseResponse course = new CourseResponse();

    protected override void OnInitialized()
    {
        btnSubmitText = Id == null ? "Save New Course" : "Update Course";
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Id is not null)
            {
                var result = await courseService.GetCourseById((int)Id);
                if (result is not null)
                {
                    course = result;
                }
                else
                {
                    toastService.ShowInfo($"There is no course with Id '{Id}'");
                }
            }

            loading = false;
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    async Task HandleSubmit()
    {
        try
        {
            var courseRequest = new CourseRequest()
                {
                    Code = course.Code,
                    Title = course.Title,
                    Unit = course.Unit,
                    Status = course.Status,
                    IsActive = course.IsActive,
                    IsDeleted = course.IsDeleted
                };

            if (Id is null)
            {
                await courseService.CreateCourse(courseRequest);
                toastService.ShowInfo($"{courseRequest.Code} was created successfully.");
            }
            else
            {
                await courseService.UpdateCourse((int)Id, courseRequest);
                toastService.ShowInfo($"{courseRequest.Code} was updated successfully.");
            }
            navigationManager.NavigateTo("admin/courses");
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    async Task DeleteCourse()
    {
        try
        {
            bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm",
                $"Do you really want to delete '{course.Code}: {course.Title}'?");
            if (confirmed)
            {
                await courseService.DeleteCourse(course.Id);
                navigationManager.NavigateTo("admin/courses");

                toastService.ShowInfo($"'{course.Code}: {course.Title}' was deleted successfully.");
            }
        }
        catch (Exception ex)
        {
            error.ProcessError(ex);
        }
    }

    private void BackToCourses()
    {
        navigationManager.NavigateTo("admin/courses");
    }
}